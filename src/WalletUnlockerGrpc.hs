{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# OPTIONS_GHC -Wno-missing-export-lists #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module WalletUnlockerGrpc where

import qualified Control.Applicative as Hs
import Control.Applicative ((<$>), (<*>), (<|>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty (..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified LndGrpc
import Network.GRPC.HighLevel.Client as HsGRPC
import Network.GRPC.HighLevel.Generated as HsGRPC
import Network.GRPC.HighLevel.Server as HsGRPC hiding (serverLoop)
import Network.GRPC.HighLevel.Server.Unregistered as HsGRPC
  ( serverLoop,
  )
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.:), (.=))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Unsafe.Coerce as Hs
import qualified Prelude as Hs

data
  WalletUnlocker
    request
    response
  = WalletUnlocker
      { walletUnlockerGenSeed ::
          request 'HsGRPC.Normal WalletUnlockerGrpc.GenSeedRequest
            WalletUnlockerGrpc.GenSeedResponse ->
          Hs.IO (response 'HsGRPC.Normal WalletUnlockerGrpc.GenSeedResponse),
        walletUnlockerInitWallet ::
          request 'HsGRPC.Normal WalletUnlockerGrpc.InitWalletRequest
            WalletUnlockerGrpc.InitWalletResponse ->
          Hs.IO
            (response 'HsGRPC.Normal WalletUnlockerGrpc.InitWalletResponse),
        walletUnlockerUnlockWallet ::
          request 'HsGRPC.Normal WalletUnlockerGrpc.UnlockWalletRequest
            WalletUnlockerGrpc.UnlockWalletResponse ->
          Hs.IO
            ( response 'HsGRPC.Normal
                WalletUnlockerGrpc.UnlockWalletResponse
            ),
        walletUnlockerChangePassword ::
          request 'HsGRPC.Normal WalletUnlockerGrpc.ChangePasswordRequest
            WalletUnlockerGrpc.ChangePasswordResponse ->
          Hs.IO
            ( response 'HsGRPC.Normal
                WalletUnlockerGrpc.ChangePasswordResponse
            )
      }
  deriving (Hs.Generic)

walletUnlockerServer ::
  WalletUnlocker HsGRPC.ServerRequest HsGRPC.ServerResponse ->
  HsGRPC.ServiceOptions ->
  Hs.IO ()
walletUnlockerServer
  WalletUnlocker
    { walletUnlockerGenSeed = walletUnlockerGenSeed,
      walletUnlockerInitWallet = walletUnlockerInitWallet,
      walletUnlockerUnlockWallet = walletUnlockerUnlockWallet,
      walletUnlockerChangePassword = walletUnlockerChangePassword
    }
  ( ServiceOptions
      serverHost
      serverPort
      useCompression
      userAgentPrefix
      userAgentSuffix
      initialMetadata
      sslConfig
      logger
      serverMaxReceiveMessageLength
    ) =
    ( HsGRPC.serverLoop
        HsGRPC.defaultOptions
          { HsGRPC.optNormalHandlers =
              [ ( HsGRPC.UnaryHandler
                    (HsGRPC.MethodName "/lnrpc.WalletUnlocker/GenSeed")
                    (HsGRPC.convertGeneratedServerHandler walletUnlockerGenSeed)
                ),
                ( HsGRPC.UnaryHandler
                    (HsGRPC.MethodName "/lnrpc.WalletUnlocker/InitWallet")
                    (HsGRPC.convertGeneratedServerHandler walletUnlockerInitWallet)
                ),
                ( HsGRPC.UnaryHandler
                    (HsGRPC.MethodName "/lnrpc.WalletUnlocker/UnlockWallet")
                    ( HsGRPC.convertGeneratedServerHandler
                        walletUnlockerUnlockWallet
                    )
                ),
                ( HsGRPC.UnaryHandler
                    (HsGRPC.MethodName "/lnrpc.WalletUnlocker/ChangePassword")
                    ( HsGRPC.convertGeneratedServerHandler
                        walletUnlockerChangePassword
                    )
                )
              ],
            HsGRPC.optClientStreamHandlers = [],
            HsGRPC.optServerStreamHandlers = [],
            HsGRPC.optBiDiStreamHandlers = [],
            optServerHost = serverHost,
            optServerPort = serverPort,
            optUseCompression = useCompression,
            optUserAgentPrefix = userAgentPrefix,
            optUserAgentSuffix = userAgentSuffix,
            optInitialMetadata = initialMetadata,
            optSSLConfig = sslConfig,
            optLogger = logger,
            optMaxReceiveMessageLength = serverMaxReceiveMessageLength
          }
    )

walletUnlockerClient ::
  HsGRPC.Client ->
  Hs.IO (WalletUnlocker HsGRPC.ClientRequest HsGRPC.ClientResult)
walletUnlockerClient client =
  (Hs.pure WalletUnlocker)
    <*> ( (Hs.pure (HsGRPC.clientRequest client))
            <*> ( HsGRPC.clientRegisterMethod
                    client
                    (HsGRPC.MethodName "/lnrpc.WalletUnlocker/GenSeed")
                )
        )
    <*> ( (Hs.pure (HsGRPC.clientRequest client))
            <*> ( HsGRPC.clientRegisterMethod
                    client
                    (HsGRPC.MethodName "/lnrpc.WalletUnlocker/InitWallet")
                )
        )
    <*> ( (Hs.pure (HsGRPC.clientRequest client))
            <*> ( HsGRPC.clientRegisterMethod
                    client
                    (HsGRPC.MethodName "/lnrpc.WalletUnlocker/UnlockWallet")
                )
        )
    <*> ( (Hs.pure (HsGRPC.clientRequest client))
            <*> ( HsGRPC.clientRegisterMethod
                    client
                    (HsGRPC.MethodName "/lnrpc.WalletUnlocker/ChangePassword")
                )
        )

data GenSeedRequest
  = GenSeedRequest
      { genSeedRequestAezeedPassphrase ::
          Hs.ByteString,
        genSeedRequestSeedEntropy :: Hs.ByteString
      }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named GenSeedRequest where
  nameOf _ = (Hs.fromString "GenSeedRequest")

instance HsProtobuf.HasDefault GenSeedRequest

instance HsProtobuf.Message GenSeedRequest where
  encodeMessage
    _
    GenSeedRequest
      { genSeedRequestAezeedPassphrase =
          genSeedRequestAezeedPassphrase,
        genSeedRequestSeedEntropy = genSeedRequestSeedEntropy
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                genSeedRequestAezeedPassphrase
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                genSeedRequestSeedEntropy
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure GenSeedRequest)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 2)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.Bytes)
          (HsProtobuf.Single "aezeed_passphrase")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          (HsProtobuf.Prim HsProtobuf.Bytes)
          (HsProtobuf.Single "seed_entropy")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB GenSeedRequest where
  toJSONPB (GenSeedRequest f1 f2) =
    ( HsJSONPB.object
        ["aezeed_passphrase" .= f1, "seed_entropy" .= f2]
    )
  toEncodingPB (GenSeedRequest f1 f2) =
    ( HsJSONPB.pairs
        ["aezeed_passphrase" .= f1, "seed_entropy" .= f2]
    )

instance HsJSONPB.FromJSONPB GenSeedRequest where
  parseJSONPB =
    ( HsJSONPB.withObject
        "GenSeedRequest"
        ( \obj ->
            (Hs.pure GenSeedRequest) <*> obj .: "aezeed_passphrase"
              <*> obj .: "seed_entropy"
        )
    )

instance HsJSONPB.ToJSON GenSeedRequest where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON GenSeedRequest where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema GenSeedRequest where
  declareNamedSchema _ =
    do
      let declare_aezeed_passphrase = HsJSONPB.declareSchemaRef
      genSeedRequestAezeedPassphrase <-
        declare_aezeed_passphrase
          Proxy.Proxy
      let declare_seed_entropy = HsJSONPB.declareSchemaRef
      genSeedRequestSeedEntropy <- declare_seed_entropy Proxy.Proxy
      let _ =
            Hs.pure GenSeedRequest
              <*> HsJSONPB.asProxy declare_aezeed_passphrase
              <*> HsJSONPB.asProxy declare_seed_entropy
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "GenSeedRequest",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ( "aezeed_passphrase",
                            genSeedRequestAezeedPassphrase
                          ),
                          ( "seed_entropy",
                            genSeedRequestSeedEntropy
                          )
                        ]
                  }
            }
        )

data GenSeedResponse
  = GenSeedResponse
      { genSeedResponseCipherSeedMnemonic ::
          Hs.Vector
            Hs.Text,
        genSeedResponseEncipheredSeed :: Hs.ByteString
      }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named GenSeedResponse where
  nameOf _ = (Hs.fromString "GenSeedResponse")

instance HsProtobuf.HasDefault GenSeedResponse

instance HsProtobuf.Message GenSeedResponse where
  encodeMessage
    _
    GenSeedResponse
      { genSeedResponseCipherSeedMnemonic =
          genSeedResponseCipherSeedMnemonic,
        genSeedResponseEncipheredSeed = genSeedResponseEncipheredSeed
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                ( Hs.coerce @(Hs.Vector Hs.Text) @(HsProtobuf.UnpackedVec Hs.Text)
                    genSeedResponseCipherSeedMnemonic
                )
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                genSeedResponseEncipheredSeed
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure GenSeedResponse)
      <*> ( Hs.coerce @(_ (HsProtobuf.UnpackedVec Hs.Text))
              @(_ (Hs.Vector Hs.Text))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 2)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Repeated HsProtobuf.String)
          (HsProtobuf.Single "cipher_seed_mnemonic")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          (HsProtobuf.Prim HsProtobuf.Bytes)
          (HsProtobuf.Single "enciphered_seed")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB GenSeedResponse where
  toJSONPB (GenSeedResponse f1 f2) =
    ( HsJSONPB.object
        ["cipher_seed_mnemonic" .= f1, "enciphered_seed" .= f2]
    )
  toEncodingPB (GenSeedResponse f1 f2) =
    ( HsJSONPB.pairs
        ["cipher_seed_mnemonic" .= f1, "enciphered_seed" .= f2]
    )

instance HsJSONPB.FromJSONPB GenSeedResponse where
  parseJSONPB =
    ( HsJSONPB.withObject
        "GenSeedResponse"
        ( \obj ->
            (Hs.pure GenSeedResponse) <*> obj .: "cipher_seed_mnemonic"
              <*> obj .: "enciphered_seed"
        )
    )

instance HsJSONPB.ToJSON GenSeedResponse where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON GenSeedResponse where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema GenSeedResponse where
  declareNamedSchema _ =
    do
      let declare_cipher_seed_mnemonic = HsJSONPB.declareSchemaRef
      genSeedResponseCipherSeedMnemonic <-
        declare_cipher_seed_mnemonic
          Proxy.Proxy
      let declare_enciphered_seed = HsJSONPB.declareSchemaRef
      genSeedResponseEncipheredSeed <-
        declare_enciphered_seed
          Proxy.Proxy
      let _ =
            Hs.pure GenSeedResponse
              <*> HsJSONPB.asProxy declare_cipher_seed_mnemonic
              <*> HsJSONPB.asProxy declare_enciphered_seed
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "GenSeedResponse",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ( "cipher_seed_mnemonic",
                            genSeedResponseCipherSeedMnemonic
                          ),
                          ( "enciphered_seed",
                            genSeedResponseEncipheredSeed
                          )
                        ]
                  }
            }
        )

data InitWalletRequest
  = InitWalletRequest
      { initWalletRequestWalletPassword ::
          Hs.ByteString,
        initWalletRequestCipherSeedMnemonic :: Hs.Vector Hs.Text,
        initWalletRequestAezeedPassphrase :: Hs.ByteString,
        initWalletRequestRecoveryWindow :: Hs.Int32,
        initWalletRequestChannelBackups ::
          Hs.Maybe
            LndGrpc.ChanBackupSnapshot,
        initWalletRequestStatelessInit :: Hs.Bool
      }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named InitWalletRequest where
  nameOf _ = (Hs.fromString "InitWalletRequest")

instance HsProtobuf.HasDefault InitWalletRequest

instance HsProtobuf.Message InitWalletRequest where
  encodeMessage
    _
    InitWalletRequest
      { initWalletRequestWalletPassword =
          initWalletRequestWalletPassword,
        initWalletRequestCipherSeedMnemonic =
          initWalletRequestCipherSeedMnemonic,
        initWalletRequestAezeedPassphrase =
          initWalletRequestAezeedPassphrase,
        initWalletRequestRecoveryWindow = initWalletRequestRecoveryWindow,
        initWalletRequestChannelBackups = initWalletRequestChannelBackups,
        initWalletRequestStatelessInit = initWalletRequestStatelessInit
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                initWalletRequestWalletPassword
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                ( Hs.coerce @(Hs.Vector Hs.Text) @(HsProtobuf.UnpackedVec Hs.Text)
                    initWalletRequestCipherSeedMnemonic
                )
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 3)
                initWalletRequestAezeedPassphrase
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 4)
                initWalletRequestRecoveryWindow
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 5)
                ( Hs.coerce @(Hs.Maybe LndGrpc.ChanBackupSnapshot)
                    @(HsProtobuf.Nested LndGrpc.ChanBackupSnapshot)
                    initWalletRequestChannelBackups
                )
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 6)
                initWalletRequestStatelessInit
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure InitWalletRequest)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
      <*> ( Hs.coerce @(_ (HsProtobuf.UnpackedVec Hs.Text))
              @(_ (Hs.Vector Hs.Text))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 2)
              )
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 3)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 4)
          )
      <*> ( Hs.coerce @(_ (HsProtobuf.Nested LndGrpc.ChanBackupSnapshot))
              @(_ (Hs.Maybe LndGrpc.ChanBackupSnapshot))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 5)
              )
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 6)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.Bytes)
          (HsProtobuf.Single "wallet_password")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          (HsProtobuf.Repeated HsProtobuf.String)
          (HsProtobuf.Single "cipher_seed_mnemonic")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 3)
          (HsProtobuf.Prim HsProtobuf.Bytes)
          (HsProtobuf.Single "aezeed_passphrase")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 4)
          (HsProtobuf.Prim HsProtobuf.Int32)
          (HsProtobuf.Single "recovery_window")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 5)
          ( HsProtobuf.Prim
              (HsProtobuf.Named (HsProtobuf.Single "ChanBackupSnapshot"))
          )
          (HsProtobuf.Single "channel_backups")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 6)
          (HsProtobuf.Prim HsProtobuf.Bool)
          (HsProtobuf.Single "stateless_init")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB InitWalletRequest where
  toJSONPB (InitWalletRequest f1 f2 f3 f4 f5 f6) =
    ( HsJSONPB.object
        [ "wallet_password" .= f1,
          "cipher_seed_mnemonic" .= f2,
          "aezeed_passphrase" .= f3,
          "recovery_window" .= f4,
          "channel_backups" .= f5,
          "stateless_init" .= f6
        ]
    )
  toEncodingPB (InitWalletRequest f1 f2 f3 f4 f5 f6) =
    ( HsJSONPB.pairs
        [ "wallet_password" .= f1,
          "cipher_seed_mnemonic" .= f2,
          "aezeed_passphrase" .= f3,
          "recovery_window" .= f4,
          "channel_backups" .= f5,
          "stateless_init" .= f6
        ]
    )

instance HsJSONPB.FromJSONPB InitWalletRequest where
  parseJSONPB =
    ( HsJSONPB.withObject
        "InitWalletRequest"
        ( \obj ->
            (Hs.pure InitWalletRequest) <*> obj .: "wallet_password"
              <*> obj .: "cipher_seed_mnemonic"
              <*> obj .: "aezeed_passphrase"
              <*> obj .: "recovery_window"
              <*> obj .: "channel_backups"
              <*> obj .: "stateless_init"
        )
    )

instance HsJSONPB.ToJSON InitWalletRequest where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON InitWalletRequest where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema InitWalletRequest where
  declareNamedSchema _ =
    do
      let declare_wallet_password = HsJSONPB.declareSchemaRef
      initWalletRequestWalletPassword <-
        declare_wallet_password
          Proxy.Proxy
      let declare_cipher_seed_mnemonic = HsJSONPB.declareSchemaRef
      initWalletRequestCipherSeedMnemonic <-
        declare_cipher_seed_mnemonic
          Proxy.Proxy
      let declare_aezeed_passphrase = HsJSONPB.declareSchemaRef
      initWalletRequestAezeedPassphrase <-
        declare_aezeed_passphrase
          Proxy.Proxy
      let declare_recovery_window = HsJSONPB.declareSchemaRef
      initWalletRequestRecoveryWindow <-
        declare_recovery_window
          Proxy.Proxy
      let declare_channel_backups = HsJSONPB.declareSchemaRef
      initWalletRequestChannelBackups <-
        declare_channel_backups
          Proxy.Proxy
      let declare_stateless_init = HsJSONPB.declareSchemaRef
      initWalletRequestStatelessInit <-
        declare_stateless_init
          Proxy.Proxy
      let _ =
            Hs.pure InitWalletRequest
              <*> HsJSONPB.asProxy declare_wallet_password
              <*> HsJSONPB.asProxy declare_cipher_seed_mnemonic
              <*> HsJSONPB.asProxy declare_aezeed_passphrase
              <*> HsJSONPB.asProxy declare_recovery_window
              <*> HsJSONPB.asProxy declare_channel_backups
              <*> HsJSONPB.asProxy declare_stateless_init
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "InitWalletRequest",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ( "wallet_password",
                            initWalletRequestWalletPassword
                          ),
                          ( "cipher_seed_mnemonic",
                            initWalletRequestCipherSeedMnemonic
                          ),
                          ( "aezeed_passphrase",
                            initWalletRequestAezeedPassphrase
                          ),
                          ( "recovery_window",
                            initWalletRequestRecoveryWindow
                          ),
                          ( "channel_backups",
                            initWalletRequestChannelBackups
                          ),
                          ( "stateless_init",
                            initWalletRequestStatelessInit
                          )
                        ]
                  }
            }
        )

newtype InitWalletResponse
  = InitWalletResponse
      { initWalletResponseAdminMacaroon ::
          Hs.ByteString
      }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named InitWalletResponse where
  nameOf _ = (Hs.fromString "InitWalletResponse")

instance HsProtobuf.HasDefault InitWalletResponse

instance HsProtobuf.Message InitWalletResponse where
  encodeMessage
    _
    InitWalletResponse
      { initWalletResponseAdminMacaroon =
          initWalletResponseAdminMacaroon
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                initWalletResponseAdminMacaroon
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure InitWalletResponse)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.Bytes)
          (HsProtobuf.Single "admin_macaroon")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB InitWalletResponse where
  toJSONPB (InitWalletResponse f1) =
    (HsJSONPB.object ["admin_macaroon" .= f1])
  toEncodingPB (InitWalletResponse f1) =
    (HsJSONPB.pairs ["admin_macaroon" .= f1])

instance HsJSONPB.FromJSONPB InitWalletResponse where
  parseJSONPB =
    ( HsJSONPB.withObject
        "InitWalletResponse"
        ( \obj ->
            (Hs.pure InitWalletResponse) <*> obj .: "admin_macaroon"
        )
    )

instance HsJSONPB.ToJSON InitWalletResponse where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON InitWalletResponse where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema InitWalletResponse where
  declareNamedSchema _ =
    do
      let declare_admin_macaroon = HsJSONPB.declareSchemaRef
      initWalletResponseAdminMacaroon <-
        declare_admin_macaroon
          Proxy.Proxy
      let _ =
            Hs.pure InitWalletResponse
              <*> HsJSONPB.asProxy declare_admin_macaroon
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "InitWalletResponse",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ( "admin_macaroon",
                            initWalletResponseAdminMacaroon
                          )
                        ]
                  }
            }
        )

data UnlockWalletRequest
  = UnlockWalletRequest
      { unlockWalletRequestWalletPassword ::
          Hs.ByteString,
        unlockWalletRequestRecoveryWindow :: Hs.Int32,
        unlockWalletRequestChannelBackups ::
          Hs.Maybe
            LndGrpc.ChanBackupSnapshot,
        unlockWalletRequestStatelessInit :: Hs.Bool
      }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named UnlockWalletRequest where
  nameOf _ = (Hs.fromString "UnlockWalletRequest")

instance HsProtobuf.HasDefault UnlockWalletRequest

instance HsProtobuf.Message UnlockWalletRequest where
  encodeMessage
    _
    UnlockWalletRequest
      { unlockWalletRequestWalletPassword =
          unlockWalletRequestWalletPassword,
        unlockWalletRequestRecoveryWindow =
          unlockWalletRequestRecoveryWindow,
        unlockWalletRequestChannelBackups =
          unlockWalletRequestChannelBackups,
        unlockWalletRequestStatelessInit =
          unlockWalletRequestStatelessInit
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                unlockWalletRequestWalletPassword
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                unlockWalletRequestRecoveryWindow
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 3)
                ( Hs.coerce @(Hs.Maybe LndGrpc.ChanBackupSnapshot)
                    @(HsProtobuf.Nested LndGrpc.ChanBackupSnapshot)
                    unlockWalletRequestChannelBackups
                )
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 4)
                unlockWalletRequestStatelessInit
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure UnlockWalletRequest)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 2)
          )
      <*> ( Hs.coerce @(_ (HsProtobuf.Nested LndGrpc.ChanBackupSnapshot))
              @(_ (Hs.Maybe LndGrpc.ChanBackupSnapshot))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 3)
              )
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 4)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.Bytes)
          (HsProtobuf.Single "wallet_password")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          (HsProtobuf.Prim HsProtobuf.Int32)
          (HsProtobuf.Single "recovery_window")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 3)
          ( HsProtobuf.Prim
              (HsProtobuf.Named (HsProtobuf.Single "ChanBackupSnapshot"))
          )
          (HsProtobuf.Single "channel_backups")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 4)
          (HsProtobuf.Prim HsProtobuf.Bool)
          (HsProtobuf.Single "stateless_init")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB UnlockWalletRequest where
  toJSONPB (UnlockWalletRequest f1 f2 f3 f4) =
    ( HsJSONPB.object
        [ "wallet_password" .= f1,
          "recovery_window" .= f2,
          "channel_backups" .= f3,
          "stateless_init" .= f4
        ]
    )
  toEncodingPB (UnlockWalletRequest f1 f2 f3 f4) =
    ( HsJSONPB.pairs
        [ "wallet_password" .= f1,
          "recovery_window" .= f2,
          "channel_backups" .= f3,
          "stateless_init" .= f4
        ]
    )

instance HsJSONPB.FromJSONPB UnlockWalletRequest where
  parseJSONPB =
    ( HsJSONPB.withObject
        "UnlockWalletRequest"
        ( \obj ->
            (Hs.pure UnlockWalletRequest) <*> obj .: "wallet_password"
              <*> obj .: "recovery_window"
              <*> obj .: "channel_backups"
              <*> obj .: "stateless_init"
        )
    )

instance HsJSONPB.ToJSON UnlockWalletRequest where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON UnlockWalletRequest where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema UnlockWalletRequest where
  declareNamedSchema _ =
    do
      let declare_wallet_password = HsJSONPB.declareSchemaRef
      unlockWalletRequestWalletPassword <-
        declare_wallet_password
          Proxy.Proxy
      let declare_recovery_window = HsJSONPB.declareSchemaRef
      unlockWalletRequestRecoveryWindow <-
        declare_recovery_window
          Proxy.Proxy
      let declare_channel_backups = HsJSONPB.declareSchemaRef
      unlockWalletRequestChannelBackups <-
        declare_channel_backups
          Proxy.Proxy
      let declare_stateless_init = HsJSONPB.declareSchemaRef
      unlockWalletRequestStatelessInit <-
        declare_stateless_init
          Proxy.Proxy
      let _ =
            Hs.pure UnlockWalletRequest
              <*> HsJSONPB.asProxy declare_wallet_password
              <*> HsJSONPB.asProxy declare_recovery_window
              <*> HsJSONPB.asProxy declare_channel_backups
              <*> HsJSONPB.asProxy declare_stateless_init
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "UnlockWalletRequest",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ( "wallet_password",
                            unlockWalletRequestWalletPassword
                          ),
                          ( "recovery_window",
                            unlockWalletRequestRecoveryWindow
                          ),
                          ( "channel_backups",
                            unlockWalletRequestChannelBackups
                          ),
                          ( "stateless_init",
                            unlockWalletRequestStatelessInit
                          )
                        ]
                  }
            }
        )

data UnlockWalletResponse = UnlockWalletResponse {}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named UnlockWalletResponse where
  nameOf _ = (Hs.fromString "UnlockWalletResponse")

instance HsProtobuf.HasDefault UnlockWalletResponse

instance HsProtobuf.Message UnlockWalletResponse where
  encodeMessage _ UnlockWalletResponse {} = (Hs.mconcat [])
  decodeMessage _ = (Hs.pure UnlockWalletResponse)
  dotProto _ = []

instance HsJSONPB.ToJSONPB UnlockWalletResponse where
  toJSONPB (UnlockWalletResponse) = (HsJSONPB.object [])
  toEncodingPB (UnlockWalletResponse) = (HsJSONPB.pairs [])

instance HsJSONPB.FromJSONPB UnlockWalletResponse where
  parseJSONPB =
    ( HsJSONPB.withObject
        "UnlockWalletResponse"
        (\obj -> (Hs.pure UnlockWalletResponse))
    )

instance HsJSONPB.ToJSON UnlockWalletResponse where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON UnlockWalletResponse where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema UnlockWalletResponse where
  declareNamedSchema _ =
    do
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "UnlockWalletResponse",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList []
                  }
            }
        )

data ChangePasswordRequest
  = ChangePasswordRequest
      { changePasswordRequestCurrentPassword ::
          Hs.ByteString,
        changePasswordRequestNewPassword ::
          Hs.ByteString,
        changePasswordRequestStatelessInit :: Hs.Bool,
        changePasswordRequestNewMacaroonRootKey ::
          Hs.Bool
      }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named ChangePasswordRequest where
  nameOf _ = (Hs.fromString "ChangePasswordRequest")

instance HsProtobuf.HasDefault ChangePasswordRequest

instance HsProtobuf.Message ChangePasswordRequest where
  encodeMessage
    _
    ChangePasswordRequest
      { changePasswordRequestCurrentPassword =
          changePasswordRequestCurrentPassword,
        changePasswordRequestNewPassword =
          changePasswordRequestNewPassword,
        changePasswordRequestStatelessInit =
          changePasswordRequestStatelessInit,
        changePasswordRequestNewMacaroonRootKey =
          changePasswordRequestNewMacaroonRootKey
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                changePasswordRequestCurrentPassword
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                changePasswordRequestNewPassword
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 3)
                changePasswordRequestStatelessInit
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 4)
                changePasswordRequestNewMacaroonRootKey
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure ChangePasswordRequest)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 2)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 3)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 4)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.Bytes)
          (HsProtobuf.Single "current_password")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          (HsProtobuf.Prim HsProtobuf.Bytes)
          (HsProtobuf.Single "new_password")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 3)
          (HsProtobuf.Prim HsProtobuf.Bool)
          (HsProtobuf.Single "stateless_init")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 4)
          (HsProtobuf.Prim HsProtobuf.Bool)
          (HsProtobuf.Single "new_macaroon_root_key")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB ChangePasswordRequest where
  toJSONPB (ChangePasswordRequest f1 f2 f3 f4) =
    ( HsJSONPB.object
        [ "current_password" .= f1,
          "new_password" .= f2,
          "stateless_init" .= f3,
          "new_macaroon_root_key" .= f4
        ]
    )
  toEncodingPB (ChangePasswordRequest f1 f2 f3 f4) =
    ( HsJSONPB.pairs
        [ "current_password" .= f1,
          "new_password" .= f2,
          "stateless_init" .= f3,
          "new_macaroon_root_key" .= f4
        ]
    )

instance HsJSONPB.FromJSONPB ChangePasswordRequest where
  parseJSONPB =
    ( HsJSONPB.withObject
        "ChangePasswordRequest"
        ( \obj ->
            (Hs.pure ChangePasswordRequest) <*> obj .: "current_password"
              <*> obj .: "new_password"
              <*> obj .: "stateless_init"
              <*> obj .: "new_macaroon_root_key"
        )
    )

instance HsJSONPB.ToJSON ChangePasswordRequest where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON ChangePasswordRequest where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema ChangePasswordRequest where
  declareNamedSchema _ =
    do
      let declare_current_password = HsJSONPB.declareSchemaRef
      changePasswordRequestCurrentPassword <-
        declare_current_password
          Proxy.Proxy
      let declare_new_password = HsJSONPB.declareSchemaRef
      changePasswordRequestNewPassword <-
        declare_new_password
          Proxy.Proxy
      let declare_stateless_init = HsJSONPB.declareSchemaRef
      changePasswordRequestStatelessInit <-
        declare_stateless_init
          Proxy.Proxy
      let declare_new_macaroon_root_key = HsJSONPB.declareSchemaRef
      changePasswordRequestNewMacaroonRootKey <-
        declare_new_macaroon_root_key
          Proxy.Proxy
      let _ =
            Hs.pure ChangePasswordRequest
              <*> HsJSONPB.asProxy declare_current_password
              <*> HsJSONPB.asProxy declare_new_password
              <*> HsJSONPB.asProxy declare_stateless_init
              <*> HsJSONPB.asProxy declare_new_macaroon_root_key
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "ChangePasswordRequest",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ( "current_password",
                            changePasswordRequestCurrentPassword
                          ),
                          ( "new_password",
                            changePasswordRequestNewPassword
                          ),
                          ( "stateless_init",
                            changePasswordRequestStatelessInit
                          ),
                          ( "new_macaroon_root_key",
                            changePasswordRequestNewMacaroonRootKey
                          )
                        ]
                  }
            }
        )

newtype ChangePasswordResponse
  = ChangePasswordResponse
      { changePasswordResponseAdminMacaroon ::
          Hs.ByteString
      }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named ChangePasswordResponse where
  nameOf _ = (Hs.fromString "ChangePasswordResponse")

instance HsProtobuf.HasDefault ChangePasswordResponse

instance HsProtobuf.Message ChangePasswordResponse where
  encodeMessage
    _
    ChangePasswordResponse
      { changePasswordResponseAdminMacaroon =
          changePasswordResponseAdminMacaroon
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                changePasswordResponseAdminMacaroon
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure ChangePasswordResponse)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.Bytes)
          (HsProtobuf.Single "admin_macaroon")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB ChangePasswordResponse where
  toJSONPB (ChangePasswordResponse f1) =
    (HsJSONPB.object ["admin_macaroon" .= f1])
  toEncodingPB (ChangePasswordResponse f1) =
    (HsJSONPB.pairs ["admin_macaroon" .= f1])

instance HsJSONPB.FromJSONPB ChangePasswordResponse where
  parseJSONPB =
    ( HsJSONPB.withObject
        "ChangePasswordResponse"
        ( \obj ->
            (Hs.pure ChangePasswordResponse) <*> obj .: "admin_macaroon"
        )
    )

instance HsJSONPB.ToJSON ChangePasswordResponse where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON ChangePasswordResponse where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema ChangePasswordResponse where
  declareNamedSchema _ =
    do
      let declare_admin_macaroon = HsJSONPB.declareSchemaRef
      changePasswordResponseAdminMacaroon <-
        declare_admin_macaroon
          Proxy.Proxy
      let _ =
            Hs.pure ChangePasswordResponse
              <*> HsJSONPB.asProxy declare_admin_macaroon
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "ChangePasswordResponse",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ( "admin_macaroon",
                            changePasswordResponseAdminMacaroon
                          )
                        ]
                  }
            }
        )
