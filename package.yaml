name:                lnd-client
version:             0.1.0.0
github:              "coingaming/lnd-client"
license:             BSD3
author:              "Mikhail Prushinskiy <mprushinsky@gmail.com>, Ilja Tkachuk <tkachuk.labs@gmail.com>, Artem Markov <drownbes@gmail.com>"
maintainer:          "Mikhail Prushinskiy <mprushinsky@gmail.com>, Ilja Tkachuk <tkachuk.labs@gmail.com>, Artem Markov <drownbes@gmail.com>"
copyright:           "2021 Coingaming <hello@coingaming.io>"
synopsis:            Lightning Network Daemon (LND) client library for Haskell
category:            Lightning, Bitcoin, Finance, Network, Payments
description:         You can find documentation at <https://hackage.haskell.org/package/lnd-client>

extra-source-files:
- README.md
- ChangeLog.md

dependencies:
# foundation
- base                  >= 4.7 && < 5
- universum             >= 1.5.0 && < 1.5.1
# time
- chronos               >= 1.0.7
- unbounded-delays      >= 0.1.1.0 && < 0.1.2
# storage
- persistent            >= 2.11.0.2
# logging
- katip                 >= 0.8.3.0
# byte and text
- bytestring            >= 0.10.8.2 && < 0.10.9
- base16-bytestring     >= 1.0.1.0 && < 1.0.2
- base64-bytestring     >= 1.0.0.2 && <  1.0.1
- text                  >= 1.2.3.1 && < 1.2.4
- aeson                 >= 1.4.4.0
# protobuf and gRPC
- containers            >= 0.6.0.1 && < 0.6.1
- deepseq               >= 1.4.4.0 && < 1.4.5
# images
- qrcode-core           >= 0.9 && < 0.9.3
- qrcode-juicypixels    >= 0.8.0 && < 0.8.1
- JuicyPixels           >= 3.3.3 && < 3.4
# system and threading
- envparse              >= 0.4.1 && < 0.4.2
- async                 >= 2.2.2 && < 2.2.3
- stm                   >= 2.5.0.0 && < 2.5.1
# crypto
- cryptonite            >= 0.25 && < 0.29
- cryptohash-sha256     >= 0.11.101.0 && < 0.11.102
- x509                  >= 1.7.5 && < 1.7.6
- asn1-encoding         >= 0.9.6 && < 0.10
- asn1-types            >= 0.3 && < 0.4
- pem                   >= 0.2.4 && < 0.3
# bitcoin
- network-bitcoin       == 1.8.3
# general
- unliftio              >= 0.2.12
- extra                 >= 1.6.18 && < 1.6.20
- scientific            >= 0.3.6.2 && < 0.3.7
- template-haskell      >= 2.14.0.0 && < 2.14.1
# protobuf
- microlens             >= 0.4.10
- proto-lens            >= 0.7.0
- proto-lens-runtime    >= 0.7.0
# proto-lens-grpc
- http2-grpc-proto-lens >= 0.1.0.0
- http2-client
- http2-client-grpc     >= 0.8.0.0
- http2-grpc-types      >= 0.5.0.0
- http2                 >= 2.0.3

library:
  source-dirs: src
  default-extensions:
  - NoImplicitPrelude
  - MultiParamTypeClasses
  - LambdaCase
  - OverloadedStrings
  - ScopedTypeVariables
  - DataKinds
  - KindSignatures
  - StrictData
  ghc-options:
  # For details on warnings: https://downloads.haskell.org/~ghc/master/users-guide/using-warnings.html
  # Enable all warnings with -Weverything, then disable the ones we don’t care about
  - -Weverything
  - -Werror
  - -Wno-missing-export-lists
  - -Wno-missing-exported-signatures # missing-exported-signatures turns off the more strict -Wmissing-signatures. See https://ghc.haskell.org/trac/ghc/ticket/14794#ticket
  - -Wno-missing-import-lists # Requires explicit imports of _every_ function (e.g. ‘$’); too strict
  - -Wno-missed-specialisations # When GHC can’t specialize a polymorphic function. No big deal and requires fixing underlying libraries to solve.
  - -Wno-all-missed-specialisations # See missed-specialisations
  - -Wno-unsafe # Don’t use Safe Haskell warnings
  - -Wno-safe # Don’t use Safe Haskell warnings
  - -Wno-missing-local-signatures # Warning for polymorphic local bindings; nothing wrong with those.
  - -Wno-monomorphism-restriction # Don’t warn if the monomorphism restriction is used
  #- -optl-fuse-ld=gold
  #ld-options:
  #- -fuse-ld=gold
  dependencies:
  - hspec >= 2.7.1 && < 2.7.2

tests:
  lnd-client-test:
    main:                Spec.hs
    source-dirs:         test
    default-extensions:
    - NoImplicitPrelude
    - MultiParamTypeClasses
    - LambdaCase
    - OverloadedStrings
    - ScopedTypeVariables
    - DataKinds
    - KindSignatures
    - StrictData
    ghc-options:
    # For details on warnings: https://downloads.haskell.org/~ghc/master/users-guide/using-warnings.html
    # Enable all warnings with -Weverything, then disable the ones we don’t care about
    - -Weverything
    - -Werror
    - -Wno-missing-exported-signatures # missing-exported-signatures turns off the more strict -Wmissing-signatures. See https://ghc.haskell.org/trac/ghc/ticket/14794#ticket
    - -Wno-missing-import-lists # Requires explicit imports of _every_ function (e.g. ‘$’); too strict
    - -Wno-missed-specialisations # When GHC can’t specialize a polymorphic function. No big deal and requires fixing underlying libraries to solve.
    - -Wno-all-missed-specialisations # See missed-specialisations
    - -Wno-unsafe # Don’t use Safe Haskell warnings
    - -Wno-safe # Don’t use Safe Haskell warnings
    - -Wno-missing-local-signatures # Warning for polymorphic local bindings; nothing wrong with those.
    - -Wno-monomorphism-restriction # Don’t warn if the monomorphism restriction is used
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    #- -O0
    #- -optl-fuse-ld=gold
    #ld-options:
    #- -fuse-ld=gold
    dependencies:
    - lnd-client
    - hspec >= 2.7.1 && < 2.7.2

